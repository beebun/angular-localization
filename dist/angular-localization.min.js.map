{"version":3,"sources":["angular-localization.js"],"names":["angular","window","document","undefined","module","constant","value","en","service","$injector","$http","$q","$log","$rootScope","$window","localeConf","localeEvents","localeSupported","localeFallbacks","isToken","str","length","TOKEN_REGEX","test","getPath","tok","path","split","result","slice","join","getKey","getBundle","i","bundles","isFrozen","obj","Object","$$frozen","freeze","loadBundle","token","parent","ref","root","locale","currentLocale","url","basePath","extend","_loading","fileExtension","key","data","LanguagesService","get","hasOwnProperty","$broadcast","resourceUpdates","bundle","deferrences","resolve","bundleReady","langFile","defer","promise","ready","paths","deferred","outstanding","isString","isArray","Error","forEach","push","all","applySubstitutions","text","subs","res","firstOfKind","sub","replace","v","k","getLocalizedString","txt","A","isValidToken","indexOf","delimiter","fromJson","isObject","info","updateHtmlTagLangAttr","lang","$html","attr","setLocale","trim","isUndefined","defaultLocale","localeChanges","cookieStore","put","cookieName","getLocale","validTokens","RegExp","element","body","persistSelection","has","navigator","userLanguage","language","getString","filter","i18nFilter","input","args","$stateful","directive","$sce","setText","elm","tag","html","getTrustedHtml","update","string","optArgs","then","scope","attrs","hasObservers","$observe","newVal","oldVal","$attr","normAttr","observableAttrs","i18n","$on","elem","updateText","target","attributes","exp","values","$eval","langFiles","lastValues","$set","$normalize","i18nAttr","sharedDictionary","this"],"mappings":"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","file":"angular-localization.min.js","sourcesContent":["/*!\n * angular-localization :: v1.4.1 :: 2016-03-07\n * web: http://doshprompt.github.io/angular-localization\n *\n * Copyright (c) 2016 | Rahul Doshi\n * License: MIT\n */\n;(function (angular, window, document, undefined) {\n    'use strict';\n\nangular.module('ngLocalize.Version', [])\n    .constant('localeVer', '1.4.1');\nangular.module('ngLocalize', ['ngSanitize', 'ngLocalize.Config', 'ngLocalize.Events', 'ngLocalize.InstalledLanguages']);\n\nangular.module('ngLocalize.InstalledLanguages', [])\n    .value('localeSupported', [\n        'en-US'\n    ])\n    .value('localeFallbacks', {\n        'en': 'en-US'\n    });\nangular.module('ngLocalize')\n    .service('locale', function ($injector, $http, $q, $log, $rootScope, $window, localeConf, localeEvents, localeSupported, localeFallbacks) {\n        var TOKEN_REGEX = localeConf.validTokens || new RegExp('^[\\\\w\\\\.-]+\\\\.[\\\\w\\\\s\\\\.-]+\\\\w(:.*)?$'),\n            $html = angular.element(document.body).parent(),\n            currentLocale,\n            deferrences,\n            bundles,\n            cookieStore;\n\n        if (localeConf.persistSelection && $injector.has('$cookieStore')) {\n            cookieStore = $injector.get('$cookieStore');\n        }\n\n        function isToken(str) {\n            return (str && str.length && TOKEN_REGEX.test(str));\n        }\n\n        function getPath(tok) {\n            var path = tok ? tok.split('.') : '',\n                result = '';\n\n            if (path.length > 1) {\n                result = path.slice(0, -1).join('.');\n            }\n\n            return result;\n        }\n\n        function getKey(tok) {\n            var path = tok ? tok.split('.') : [],\n                result = '';\n\n            if (path.length) {\n                result = path[path.length - 1];\n            }\n\n            return result;\n        }\n\n        function getBundle(tok) {\n            var result = null,\n                path = tok ? tok.split('.') : [],\n                i;\n\n            if (path.length > 1) {\n                result = bundles;\n\n                for (i = 0; i < path.length - 1; i++) {\n                    if (result[path[i]]) {\n                        result = result[path[i]];\n                    } else {\n                        result = null;\n                        break;\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        function isFrozen (obj) {\n            return (Object.isFrozen || function (obj) {\n                return obj && obj.$$frozen;\n            })(obj);\n        }\n\n        function freeze (obj) {\n            return (Object.freeze || function (obj) {\n                if (obj) {\n                    obj.$$frozen = true;\n                }\n            })(obj);\n        }\n\n        function loadBundle(token) {\n            var path = token ? token.split('.') : '',\n                root = bundles,\n                parent,\n                locale = currentLocale,\n                url = localeConf.basePath + '/' + locale,\n                ref,\n                i;\n\n            if (path.length > 1) {\n                for (i = 0; i < path.length - 1; i++) {\n                    ref = path[i];\n                    if (!root[ref]) {\n                        root[ref] = {};\n                    }\n                    parent = root;\n                    root = root[ref];\n                    url += '/' + ref;\n                }\n\n                if (isFrozen(root)) {\n                    root = angular.extend({}, root);\n                }\n                if (!root._loading) {\n                    root._loading = true;\n\n                    url += localeConf.fileExtension;\n\n                    // Get data from Angular service\n                    var data = LanguagesService.get(url);\n\n                    var key,\n                        path = getPath(token);\n                    // Merge the contents of the obtained data into the stored bundle.\n                    for (key in data) {\n                        if (data.hasOwnProperty(key)) {\n                            root[key] = data[key];\n                        }\n                    }\n\n                    // Mark the bundle as having been \"loaded\".\n                    delete root._loading;\n                    parent[ref] = freeze(root);\n                    root = null;\n\n                    // Notify anyone who cares to know about this event.\n                    $rootScope.$broadcast(localeEvents.resourceUpdates, {\n                        locale: locale,\n                        path: path,\n                        bundle: parent[ref]\n                    });\n\n                    // If we issued a Promise for this file, resolve it now.\n                    if (deferrences[path]) {\n                        deferrences[path].resolve(path);\n                    }\n                }\n            }\n        }\n\n        function bundleReady(path) {\n            var bundle,\n                token;\n\n            path = path || localeConf.langFile;\n            token = path + '._LOOKUP_';\n\n            bundle = getBundle(token);\n\n            if (!deferrences[path]) {\n                deferrences[path] = $q.defer();\n            }\n\n            if (bundle && !bundle._loading) {\n                deferrences[path].resolve(path);\n            } else {\n                if (!bundle) {\n                    loadBundle(token);\n                }\n            }\n\n            return deferrences[path].promise;\n        }\n\n        function ready(path) {\n            var paths,\n                deferred,\n                outstanding;\n\n            if (angular.isString(path)) {\n                paths = path.split(',');\n            } else if (angular.isArray(path)) {\n                paths = path;\n            } else {\n                throw new Error('locale.ready requires either an Array or comma-separated list.');\n            }\n\n            if (paths.length > 1) {\n                outstanding = [];\n                paths.forEach(function (path) {\n                    outstanding.push(bundleReady(path));\n                });\n                deferred = $q.all(outstanding);\n            } else {\n                deferred = bundleReady(path);\n            }\n\n            return deferred;\n        }\n\n        function applySubstitutions(text, subs) {\n            var res = text,\n                firstOfKind = 0;\n\n            if (subs) {\n                if (angular.isArray(subs)) {\n                    angular.forEach(subs, function (sub, i) {\n                        res = res.replace('%' + (i + 1), sub);\n                        res = res.replace('{' + (i + 1) + '}', sub);\n                    });\n                } else {\n                    angular.forEach(subs, function (v, k) {\n                        ++firstOfKind;\n\n                        res = res.replace('{' + k + '}', v);\n                        res = res.replace('%' + k, v);\n                        res = res.replace('%' + (firstOfKind), v);\n                        res = res.replace('{' + (firstOfKind) + '}', v);\n                    });\n                }\n            }\n            res = res.replace(/\\n/g, '<br>');\n\n            return res;\n        }\n\n        function getLocalizedString(txt, subs) {\n            var result = '',\n                bundle,\n                key,\n                A,\n                isValidToken = false;\n\n            if (angular.isString(txt) && !subs && txt.indexOf(localeConf.delimiter) !== -1) {\n                A = txt.split(localeConf.delimiter);\n                txt = A[0];\n                subs = angular.fromJson(A[1]);\n            }\n\n            isValidToken = isToken(txt);\n            if (isValidToken) {\n                if (!angular.isObject(subs)) {\n                    subs = [subs];\n                }\n\n                bundle = getBundle(txt);\n                if (bundle && !bundle._loading) {\n                    key = getKey(txt);\n\n                    if (bundle[key]) {\n                        result = applySubstitutions(bundle[key], subs);\n                    } else {\n                        $log.info('[localizationService] Key not found: ' + txt);\n                        result = '%%KEY_NOT_FOUND%%';\n                    }\n                } else {\n                    if (!bundle) {\n                        loadBundle(txt);\n                    }\n                }\n            } else {\n                result = txt;\n            }\n\n            return result;\n        }\n\n        function updateHtmlTagLangAttr(lang) {\n            lang = lang.split('-')[0];\n\n            $html.attr('lang', lang);\n        }\n\n        function setLocale(value) {\n            var lang;\n\n            if (angular.isString(value)) {\n                value = value.trim();\n                if (localeSupported.indexOf(value) !== -1) {\n                    lang = value;\n                } else {\n                    lang = localeFallbacks[value.split('-')[0]];\n                    if (angular.isUndefined(lang)) {\n                        lang = localeConf.defaultLocale;\n                    }\n                }\n            } else {\n                lang = localeConf.defaultLocale;\n            }\n\n            if (lang !== currentLocale) {\n                bundles = {};\n                deferrences = {};\n                currentLocale = lang;\n\n                updateHtmlTagLangAttr(lang);\n\n                $rootScope.$broadcast(localeEvents.localeChanges, currentLocale);\n\n                if (cookieStore) {\n                    cookieStore.put(localeConf.cookieName, lang);\n                }\n            }\n        }\n\n        function getLocale() {\n            return currentLocale;\n        }\n\n        setLocale(cookieStore && cookieStore.get(localeConf.cookieName) ? cookieStore.get(localeConf.cookieName) : $window.navigator.userLanguage || $window.navigator.language);\n\n        return {\n            ready: ready,\n            isToken: isToken,\n            getPath: getPath,\n            getKey: getKey,\n            setLocale: setLocale,\n            getLocale: getLocale,\n            getString: getLocalizedString\n        };\n    });\n\nangular.module('ngLocalize')\n    .filter('i18n', function (locale) {\n        var i18nFilter = function (input, args) {\n            return locale.getString(input, args);\n        };\n\n        i18nFilter.$stateful = true;\n\n        return i18nFilter;\n    });\n\nangular.module('ngLocalize.Events', [])\n    .constant('localeEvents', {\n        resourceUpdates: 'ngLocalizeResourcesUpdated',\n        localeChanges: 'ngLocalizeLocaleChanged'\n    });\nangular.module('ngLocalize')\n    .directive('i18n', function ($sce, locale, localeEvents, localeConf) {\n        function setText(elm, tag) {\n            if (tag !== elm.html()) {\n                elm.html($sce.getTrustedHtml(tag));\n            }\n        }\n\n        function update(elm, string, optArgs) {\n            if (locale.isToken(string)) {\n                locale.ready(locale.getPath(string)).then(function () {\n                    setText(elm, locale.getString(string, optArgs));\n                });\n            } else {\n                setText(elm, string);\n            }\n        }\n\n        return function (scope, elm, attrs) {\n            var hasObservers;\n\n            attrs.$observe('i18n', function (newVal, oldVal) {\n                if (newVal && newVal !== oldVal) {\n                    update(elm, newVal, hasObservers); \n                }\n            });\n\n            angular.forEach(attrs.$attr, function (attr, normAttr) {\n                if (localeConf.observableAttrs.test(attr)) {\n                    attrs.$observe(normAttr, function (newVal) {\n                        if (newVal || !hasObservers || !hasObservers[normAttr]) {\n                            hasObservers = hasObservers || {};\n                            hasObservers[normAttr] = attrs[normAttr];\n                            update(elm, attrs.i18n, hasObservers);\n                        }\n                    });\n                }\n            });\n\n            scope.$on(localeEvents.resourceUpdates, function () {\n                update(elm, attrs.i18n, hasObservers);\n            });\n            scope.$on(localeEvents.localeChanges, function () {\n                update(elm, attrs.i18n, hasObservers);\n            });\n        };\n    })\n    .directive('i18nAttr', function (locale, localeEvents) {\n        return function (scope, elem, attrs) {\n            var lastValues = {};\n\n            function updateText(target, attributes) {\n                var values = scope.$eval(attributes),\n                    langFiles = [],\n                    exp;\n\n                for(var key in values) {\n                    exp = values[key];\n                    if (locale.isToken(exp) && langFiles.indexOf(locale.getPath(exp)) === -1) {\n                        langFiles.push(locale.getPath(exp));\n                    }\n                }\n\n                locale.ready(langFiles).then(function () {\n                    var value = '';\n\n                    for(var key in values) {\n                        exp = values[key];\n                        value = locale.getString(exp);\n                        if (lastValues[key] !== value) {\n                            attrs.$set(attrs.$normalize(key), lastValues[key] = value);\n                        }\n                    }\n                });\n            }\n\n            attrs.$observe('i18nAttr', function (newVal) {\n                if (newVal) {\n                    updateText(elem, newVal); \n                }\n            });\n\n            scope.$on(localeEvents.resourceUpdates, function () {\n                updateText(elem, attrs.i18nAttr);\n            });\n            scope.$on(localeEvents.localeChanges, function () {\n                updateText(elem, attrs.i18nAttr);\n            });\n        };\n    });\n\nangular.module('ngLocalize.Config', [])\n    .value('localeConf', {\n        basePath: 'languages',\n        defaultLocale: 'en-US',\n        sharedDictionary: 'common',\n        fileExtension: '.lang.json',\n        persistSelection: true,\n        cookieName: 'COOKIE_LOCALE_LANG',\n        observableAttrs: new RegExp('^data-(?!ng-|i18n)'),\n        delimiter: '::',\n        validTokens: new RegExp('^[\\\\w\\\\.-]+\\\\.[\\\\w\\\\s\\\\.-]+\\\\w(:.*)?$')\n    });\n\n}(this.angular, this, this.document));\n"],"sourceRoot":"/source/"}